//
//  CollapseHierarchy.swift
//  Rerfactoring
//
//  Created by 1 on 1/28/18.
//  Copyright © 2018 User. All rights reserved.
//
//У вас есть некая иерархия классов, в которой подкласс мало чем отличается от суперкласса.
//Слейте подкласс и суперкласс воедино.

import Foundation

//Когда нельзя применить!!!
//Если в иерархии классов находится больше одного подкласса, то после проведения рефакторинга, оставшиеся подклассы должны стать наследниками класса, в котором была объединена иерархия.
//Однако имейте в виду, что это может привести к нарушению принципа подстановки Барбары Лисков. Например, если в программе эмуляторе городского транспорта неверно свернуть суперкласс Транспорт в подкласс Автомобиль, класс Самолёт может оказаться наследником Автомобиля, а это уже неправильно.

class Driver {
    var carName: String = ""
    var costPerHour: Double = 0
}

class TaxiDriver {
    var carName: String = ""
    var costPerHour: Double = 0
}


